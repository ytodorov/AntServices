@model PingPermalinkViewModel

@{
    ViewBag.Title = "Ping";
    ViewBag.MetaDescription = "Free distributed web-based ping service. Pings simultaneously from many locations to check if a host is online and measure round-trip times.";
}
<div class="normalheader transition animated fadeIn small-header">
    <div class="hpanel">
        <div class="panel-body">
            <div id="hbreadcrumb" class="pull-right">
                <ol class="hbreadcrumb breadcrumb">
                    <li><a href="/">Home</a></li>
                    <li><a href="/ping">Ping</a></li>
                </ol>
            </div>
            <h2 class="font-light m-b-xs">
                Ping
            </h2>
            <small>Test the reachability of a host.</small>
        </div>
    </div>
</div>

@if (Model != null)
{
    @Html.Raw((Html.AntCreateStandardPanel("hgreen", "Ping report summary",
    "<div class='text-center'>" +
    "<a class='pdfexportpage'>Download as PDF" + "</a>" +
    "<p>" + "Created on: " + Model.DateCreated + "</p>" +
    "<p>" + "Permalink: <a href='" + Context.Request.Url.ToString() + "' target='_blank'>" + Context.Request.Url.ToString() + "</a></p>" +
    "<p>" + "<div class='addthis_sharing_toolbox'></div></p>" +
    "<div>")))

}




<div class="col-lg-12">
    <div class="hpanel hgreen">
        <div class="panel-heading">
            <p class="text-center">
                Ping an IP address or host name
            </p>

        </div>
        <div class="panel-body">
            <p>
                @(Html.Kendo().AutoComplete()
          .Name("ip")
          .DataTextField("Name")
          .MinLength(1)
          .HtmlAttributes(new { style = "width:100%;" })
          .Value(Model?.DestinationAddress)
           .Filter("contains")
          .DataSource(source => source
              .Custom()
              .Group(g => g.Add("Category", typeof(string)))
              .Transport(transport => transport
                .Read(read =>
                {
                    read.Action("ReadAddressesToPing", "Ping");
                }))
                .ServerFiltering(false)
                ).Deferred()
                )

            </p>
            <p class="text-center">
                <input type="checkbox" id="showInHistory" class="k-checkbox" checked="checked">
                <label class="k-checkbox-label" for="showInHistory">Save in history</label>
            </p>
            <p>

                <button type="button" class="ladda-button btn center-block btn-outline btn-success" id="btnPing" data-style="zoom-in">
                    <span class="ladda-label">Ping</span>
                    <span class="ladda-spinner"></span>
                </button>
            </p>
            <p>
                @(Html.Kendo().ProgressBar()
                  .Name("loadingProgressBar")
                  .Orientation(ProgressBarOrientation.Horizontal)
                  .ShowStatus(true)
                  .Animation(true)
                  .HtmlAttributes(new { style = "display:none;width:100%" })
                  .Deferred()
                )
            </p>
        </div>
    </div>
</div>

@if (Model != null)
{

    @Html.Raw((Html.AntCreateStandardPanel("hyellow", "Table: Round-trip times and latencies in ms.", "<p>" +
        Html.Kendo().Grid<PingResponseSummaryViewModel>()
            .Name("pingResultsGrid")
            .Columns(columns =>
            {
                columns.Bound(c => c.SourceHostName).Title("Origin");
                columns.Bound(c => c.DestinationIpAddress).Title("Dest");
                if (!Model.IsDestinationIpAddress)
                {
                    columns.Bound(c => c.DestinationHostName).Title("Host");
                }

                columns.Bound(c => c.MaxRtt).Title("Max");
                columns.Bound(t => t.AvgRtt).Title("Avg").Format("{0:n0}");
                columns.Bound(c => c.MinRtt).Title("Min");
                columns.Bound(c => c.PacketsSent).Title("Sent");
                columns.Bound(c => c.PacketsReceived).Title("Received");
                columns.Bound(c => c.Latency).Title("Latency");
            })
            .Scrollable(s => s.Enabled(false))
            .ToolBar(t =>
            {
                t.Excel().Text(string.Empty);
                t.Pdf().Text(string.Empty);
            })
            .Excel(e => e.AllPages(true).FileName("pingExportHistory(www.toolsfornet.com).xlsx").ProxyURL(Url.Action("Excel", "Export")))
            .Pdf(e => e.AllPages().FileName("pingExportHistory(www.toolsfornet.com).pdf").ProxyURL(Url.Action("Pdf", "Export")))
            .DataSource(dataSource => dataSource
                .Ajax()
                .Sort(s => s.Add(ss => ss.AvgRtt))
                .ServerOperation(false)

            )
            .Sortable()
            .BindTo(Model?.PingResponseSummaries)
            .Deferred().ToHtmlString() + "</p>")))

}

@if (Model != null)
{

    @Html.Raw((Html.AntCreateStandardPanel("hred", "Chart: Round-trip times and latencies in ms.", "<p>" +
        Html.Kendo().Chart(Model.PingResponseSummaries.OrderBy(s => s.AvgRtt)).Theme("metro")
            .Name("pingResultsChart")
            .Legend(legend => legend
                .Position(ChartLegendPosition.Top)
            )

            .Series(series =>
            {
                series.Column(model => model.MaxRtt).Name("Max");
                series.Column(model => model.AvgRtt).Name("Avg");
                series.Column(model => model.MinRtt).Name("Min");
                series.Column(model => model.Latency).Name("Latency");
            })
            .CategoryAxis(axis => axis
                .Categories(model => model.SourceHostName)
                .Labels(labels => labels.Rotation(-90))
                .MajorGridLines(lines => lines.Visible(false))
            )
            .ValueAxis(axis => axis.Numeric()
                .Labels(labels => labels.Format("{0:N0}"))
                .Line(line => line.Visible(false))
            )
            .Tooltip(tooltip => tooltip
                .Visible(true)
                .Format("{0:N0}")
            ).Deferred().ToHtmlString() + "</p>")))
}

@if (Model != null)
{

    <div class="col-lg-12">
        <div class="hpanel hblue">
            <div class="panel-heading">
                <p class="text-center">
                    Ping locations and distances
                </p>
            </div>
            <div class="panel-body">
                <p class="text-center"><img src="~/Content/img/pinRedColor.png" alt="Ping source" />Ping source &nbsp;<img src="~/Content/img/pinGreenColor.png" alt="Ping destination" />Ping destination</p>

                <p>
                    <div id="map" style="width:100px;height: 10px"></div>
                </p>
                <p class="text-center">Locations of IP addresses are only approximations.</p>
            </div>
        </div>
    </div>

}
    @*@if (Model != null)
        {

            @Html.Raw((Html.AntCreateStandardPanel("horange", " Permalink", "<p>" +
            "permalinks" + "</p>")))

        }*@

    @section scripts {
        <script>
            $(window).ready(function myfunction() {
                // Toastr options
                toastr.options = {
                    "debug": false,
                    "newestOnTop": false,
                    "positionClass": "toast-top-center",
                    "closeButton": true,
                    "toastClass": "animated fadeInDown",
                };
                $('#btnSend').click(function (e) {
                    toastr.success('Success - Email was successfully sent.');
                    e.preventDefault();
                    $("#iconSendEmail").click();
                });
            });

        </script>

        @if (Model != null)
    {
            <script>

                setTimeout(function f() {
                    var permalinkId = '@Model.Id';
                    $.ajax({
                        method: "POST",
                        url: "/home/googlemapfromips",
                        data: { permalinkId: permalinkId },
                        success: function f(gmData) {
                            $("#map").height("300px");
                            eval(gmData);
                        }
                    });
                }, 1)


            </script>
        }
        <script src="~/Scripts/viewsJS/pingIndex.js"></script>

    }

    @*history*@

    @Html.Raw((Html.AntCreateStandardPanel("hviolet", "Ping history for current user's IP", "<p>" +
    Html.Kendo().Grid<PingPermalinkViewModel>().CreatePingPermalinkGrid(Url).ToHtmlString() + "</p>")))

    @if (Model != null)
    {
        <script>
            function getRequestedAddress() {
                var data =
                {
                    address: $("#ip").val()
                };
                return data;
            }

        </script>


        @Html.Raw((Html.AntCreateStandardPanel("hviolet", "Ping history for " + Model.DestinationAddress, "<p>" +
     Html.Kendo().Grid<PingPermalinkViewModel>().CreatePingPermalinkGrid(Url, "getRequestedAddress").ToHtmlString() + "</p>")))




    }
    <script>
        function getAllPermalinks() {
            var data =
            {
                allPermalinks: true
            };
            return data;
        }
    </script>
    @Html.Raw((Html.AntCreateStandardPanel("hviolet", "Ping history for the last 100 pings", "<p>" +
     Html.Kendo().Grid<PingPermalinkViewModel>().CreatePingPermalinkGrid(Url, "getAllPermalinks").ToHtmlString() + "</p>")))
    <div class="normalheader transition animated fadeIn">

    </div>

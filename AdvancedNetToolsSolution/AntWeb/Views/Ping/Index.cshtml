@model string

@(Html.Kendo().Grid<string>().Name("asdasd"))

<form role="form">
    <div id="accordion">
        <div>
            <h4>Main</h4>
            <div class="padding-10">
                <div class="form-group">
                    <label class="control-label" for="ip">IP or URL:</label>
                    <div>
                        <input class="k-textbox" id="ip" placeholder="Enter IP or URL" value="www.yahoo.com" type="text" style="width:100%">
                    </div>
                </div>

            </div>
        </div>
        <div>

            <div>
                <h4>Advanced settings</h4>
                <div class="padding-10">

                    <div class="form-group">
                        <label class="control-label" for="tbPacketsCount">Packets Count:</label>
                        <div>
                            @(Html.Kendo().NumericTextBox<int>()
                            .Name("tbPacketsCount")
                            .Min(1)
                            .Max(10)
                            .Value(4)
                            .Placeholder("Enter packets count")
                            .HtmlAttributes(new { style = "width: 30%" })
                            )
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label" for="tbPacketsSize">Packet size in bytes:</label>
                        <div>
                            @(Html.Kendo().NumericTextBox<int>()
                            .Name("tbPacketsSize")
                            .Min(1)
                            .Max(65000)
                            .Placeholder("Enter MTU")
                            .HtmlAttributes(new { style = "width: 30%" })
                            )
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label" for="tbDelayBetweenPings">Delay between pings (ms):</label>
                        <div>
                            @(Html.Kendo().NumericTextBox<int>()
                            .Name("tbDelayBetweenPings")
                            .Min(1)
                            .Max(1000)
                            .Value(10)
                            .Placeholder("Enter Delay Between Pings")
                            .HtmlAttributes(new { style = "width: 30%" })
                            )
                        </div>
                    </div>


                    <div class="form-group">
                        <label class="control-label" for="tbTTL">Time to Live:</label>
                        <div>
                            @(Html.Kendo().NumericTextBox<int>()
                            .Name("tbTTL")
                            .Min(1)
                            .Max(128)
                            .Value(64)
                            .Placeholder("Enter TTL")
                            .HtmlAttributes(new { style = "width: 30%" })
                            )
                        </div>
                    </div>
                    <div class="form-group">
                        <div>
                            <input type="checkbox" id="cbDontFragment" class="k-checkbox" checked="checked">
                            <label class="k-checkbox-label" for="cbDontFragment">Don't Fragment</label>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
    <footer>
        <input type="button" class="k-button" id="btnPing" value="Ping" />
    </footer>
</form>

@*<div id="example">
    <div id="grid"></div>*@
    @(Html.Kendo().Grid<PingReplySummaryViewModel>()
        .Name("grid")
        .Columns(columns =>
        {
            columns.Bound(c => c.MaxRtt).Format("n");
            columns.Bound(c => c.MinRtt).Format("n");
            columns.Bound(c => c.AvgRtt).Format("n");

            columns.Bound(c => c.TxTimeInSeconds).Format("n");
            columns.Bound(c => c.TxBytesPerSecond).Format("n");
            columns.Bound(c => c.TxPacketsPerSecond).Format("n");

            columns.Bound(c => c.RxTimeInSeconds).Format("n");
            columns.Bound(c => c.RxBytesPerSecond).Format("n");
            columns.Bound(c => c.RxPacketsPerSecond).Format("n");
         
        })
        .Scrollable()
        .Groupable()
        .Sortable()
        .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(5))
        .DataSource(dataSource => dataSource
            .Ajax()
            .Read(read => read.Data("/Ping/Read"))
            .PageSize(20)
        )
    )

@*</div>*@

<div id="map" style="width:100px;height: 300px"></div>

@section pagespecific {
    <script type="text/javascript">
        $(document).ready(function () {

            var accordionIcons = {
                header: "fa fa-plus",    // custom icon class
                activeHeader: "fa fa-minus" // custom icon class
            };

            $("#accordion").accordion({
                autoHeight: false,
                heightStyle: "content",
                collapsible: true,
                animate: 300,
                icons: accordionIcons,
                header: "h4",
            })

            $("#btnPing").click(function btnPingClick() {
                $('#grid').data('kendoGrid').dataSource.read().then(function (test) {
                    @*eval(@(SmartAdminMvc.Extensions.GoogleMap.GetMapWithLocaions()));*@
                });

                $('#grid').show();
            });

            $('#grid').hide();

            $("#grid").kendoGrid({
                autoBind: false,
                dataSource: {
                    transport: {
                        read: { url: "/Ping/Read" },

                        parameterMap: function (data, type) {
                            if (type == "read") {
                                return {
                                    ip: $("#ip").val(),
                                    packetsCount: $("#tbPacketsCount").val(),
                                    packetsSize: $("#tbPacketsSize").val(),
                                    delayBetweenPings: $("#tbDelayBetweenPings").val(),
                                    ttl: $("#tbTTL").val(),
                                    df: $('#cbDontFragment').is(':checked')
                                }
                            }
                        }
                    },
                    schema: {
                        data: "Data",
                        model: {
                            fields: {
                                MaxRtt: { type: "number" },
                                MinRtt: { type: "number" },
                                AvgRtt: { type: "number" },

                                TxTimeInSeconds: { type: "number" },
                                TxBytesPerSecond: { type: "number" },
                                TxPacketsPerSecond: { type: "number" },

                                RxTimeInSeconds: { type: "number" },
                                RxBytesPerSecond: { type: "number" },
                                RxPacketsPerSecond: { type: "number" }
                            }
                        }
                    },
                    pageSize: 20,
                        },
                        //sortable: true,
                        //columns: [{ field: "MaxRtt" },
                        //          { field: "MinRtt" },
                        //          { field: "AvgRtt" }
                                  //,
                                  //{ field: "TxTimeInSeconds" },
                                  //{ field: "TxBytesPerSecond" },
                                  //{ field: "TxPacketsPerSecond" },
                                  //{ field: "RxTimeInSeconds" },
                                  //{ field: "RxBytesPerSecond" },
                                  //{ field: "RxPacketsPerSecond" }
                        //]
                });
        });
    </script>
}

@model TraceroutePermalinkViewModel

@{
    ViewBag.Title = "Traceroute";
    ViewBag.MetaDescription = "Free distributed online traceroute service. Display the route and measure transit delays of packets simultaneously from 10 locations.";
    ViewBag.OgImage = "https://toolsfornet.com/images/tracerouteimage.png";
}
<div class="normalheader transition animated fadeIn small-header">
    <div class="hpanel">
        <div class="panel-body">
            <div id="hbreadcrumb" class="pull-right">
                <ol class="hbreadcrumb breadcrumb">
                    <li>
                        <a href="/">Home</a>
                    </li>
                    <li>
                        <a href="/ping">Traceroute</a>
                    </li>
                </ol>
            </div>
            <h2 class="font-light m-b-xs">
                Traceroute
            </h2>
            <small>Measure transit delays of packets across an IP network</small>
        </div>
    </div>
</div>

@if (Model != null)
{
@Html.Raw((Html.AntCreateStandardPanel("hgreen", "Traceroute report summary",
"<div class='text-center'>" +
"<a style='display:none' class='pdfexportpage'>Download as PDF" + "</a>" +
"<p>" + "Created on: " + Model.DateCreated + "</p>" +
"<p>" + "Share this permalink: <a href='" + Context.Request.Url.ToString() + "' target='_blank'>" + Context.Request.Url.ToString() + "</a></p>" +
"<p>" + "<div class='addthis_sharing_toolbox'></div></p>" +
"<div>")))

}




@Html.Partial("_Addresses", new AddressViewModel()
{
    ButtonId = "btnTraceRoute",
    ButtonText = "Traceroute",
    DefaultDestinationAddress = Model?.DestinationAddress,
    PanelTitle = "IP address or host name"
}
)


@if (Model != null)
{

@Html.Raw((Html.AntCreateStandardPanel("hyellow", "Table: Round-trip times (in ms.) and hops", "<p>" +
Html.Kendo().Grid<TracerouteResponseDetailViewModel>()
.Name("tracerouteResultsGrid")
.Columns(columns =>
{

    columns.Bound(c => c.Hop).Title("Hop");
    columns.Bound(t => t.Rtt).Title("Rtt");
    columns.Bound(c => c.Ip).Title("Ip").ClientTemplate("<a target='_blank' href='#:window.location.origin#/iplocation?ip=#:Ip#'>#:Ip#</a>");//.ClientTemplate("<a href='https://toolsfornet.com/iplocation?ip=#:Ip#'>#:Ip#</a>"); ;
    columns.Bound(c => c.AddressName).Title("Name");
})
.Scrollable(s => s.Enabled(false))
.ToolBar(t =>
{
    t.Excel().Text(string.Empty);
    t.Pdf().Text(string.Empty);
})
.Excel(e => e.AllPages(true).FileName("tracerouteExportHistory(www.toolsfornet.com).xlsx").ProxyURL(Url.Action("Excel", "Export")))
.Pdf(e => e.AllPages().FileName("tracerouteExportHistory(www.toolsfornet.com).pdf").ProxyURL(Url.Action("Pdf", "Export")))
.DataSource(dataSource => dataSource
.Ajax()
.Sort(s => s.Add(ss => ss.Hop))
.Group(s => s.Add(ss => ss.Location))
.ServerOperation(false)

)
.Sortable()
.BindTo(Model?.AllDetails)
.Deferred().ToHtmlString() + "</p>")))

}

    
@*@if (Model != null)
{

    <div id="divMap">
        <div class="hpanel hblue">
            <div class="panel-heading">
                <p class="text-center">
                    Traceroute paths
                </p>
            </div>
            <div class="panel-body">             
                <p>
                    <div id="map" style="width:100px;height: 10px"></div>
                </p>
                <p class="text-center">Locations of IP addresses are only approximations.</p>
            </div>
        </div>
    </div>

}*@


@section scripts {
<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDoER6oaWJAUFMNCCE8IkCGsIyHsbTE0Zw"></script>
    <script src="~/scripts/viewsjs/tracerouteindex.js"></script>

@if (Model != null)
    {
    @*Без карта за сега, гърми а и не е особено читава <script>

        setTimeout(function f() {
            var permalinkId = '@Model.Id';
            $.ajax({
                       method: "POST",
                       url: "/home/googlemapfromips",
                       data: {
                           permalinkId: permalinkId,
                           permalinkType: '@typeof(TraceroutePermalink).Name'
                       },
                       success: function f(gmData) {
                           $("#map").height("600px");
                           eval(gmData);
                       }
                   });
        }, 1)

    </script>*@
}
}


@*history*@

@Html.Raw((Html.AntCreateStandardPanel("hviolet", "Traceroute history for current user's IP", "<p>" +
Html.Kendo().Grid<TraceroutePermalinkViewModel>().CreateTreaceroutePermalinkGrid(Url).ToHtmlString() + "</p>")))

@if (Model != null)
{
<script>
    function getRequestedAddress() {
        var data = {
            address: $("#ip").val()
        };
        return data;
    }
    
</script>

@Html.Raw((Html.AntCreateStandardPanel("hviolet", "Traceroute history for " + Model.DestinationAddress, "<p>" +
Html.Kendo().Grid<TraceroutePermalinkViewModel>().CreateTreaceroutePermalinkGrid(Url, "getRequestedAddress").ToHtmlString() + "</p>")))




}
<script>
    function getAllPermalinks() {
        var data = {
            allPermalinks: true
        };
        return data;
    }
</script>
@Html.Raw((Html.AntCreateStandardPanel("hviolet", "Traceroute history for the last 100 traceroutes", "<p>" +
Html.Kendo().Grid<TraceroutePermalinkViewModel>().CreateTreaceroutePermalinkGrid(Url, "getAllPermalinks").ToHtmlString() + "</p>")))
<div class="normalheader transition animated fadeIn">

</div>



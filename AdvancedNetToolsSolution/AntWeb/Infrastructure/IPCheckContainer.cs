//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Notice: Use of the service proxies that accompany this notice is subject to
//            the terms and conditions of the license agreement located at
//            http://go.microsoft.com/fwlink/?LinkID=202740
//            If you do not agree to these terms you may not use this content.
namespace MelissaData
{
    using System;
    using System.Collections.Generic;
    using System.Data.Services.Client;
    using System.Net;
    using System.IO;
    using AntDal.Entities;

    public partial class IPCheckContainer : System.Data.Services.Client.DataServiceContext
    {

        public IPCheckContainer(Uri serviceRoot) :
                base(serviceRoot)
        {
        }

        /// <summary>
        /// </summary>
        /// <param name="IPAddress">IP Address to be verified Sample Values : 216.231.3.166</param>
        /// <param name="MaximumSuggestions">Maximum suggestions to return Sample Values : 5</param>
        /// <param name="MinimumConfidence">Minimum confidence of results to return. The value should be between 0 and 1. Sample Values : 0.7</param>
        public DataServiceQuery<MelissaIpLocation> SuggestIPAddresses(String IPAddress, Int32 MaximumSuggestions, Double MinimumConfidence)
        {
            if ((IPAddress == null))
            {
                throw new System.ArgumentNullException("IPAddress", "IPAddress value cannot be null");
            }
            DataServiceQuery<MelissaIpLocation> query;
            query = base.CreateQuery<MelissaIpLocation>("SuggestIPAddresses").AddQueryOption("MaximumSuggestions", MaximumSuggestions).AddQueryOption("MinimumConfidence", MinimumConfidence);
            if ((IPAddress != null))
            {
                query = query.AddQueryOption("IPAddress", string.Concat("\'", System.Uri.EscapeDataString(IPAddress), "\'"));
            }
            return query;
        }
    }
}
